#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoAnLTUDQL1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLThiTracNghiem")]
	public partial class QLThiTracNghiemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAnswerDistribute(AnswerDistribute instance);
    partial void UpdateAnswerDistribute(AnswerDistribute instance);
    partial void DeleteAnswerDistribute(AnswerDistribute instance);
    partial void InsertClassroom(Classroom instance);
    partial void UpdateClassroom(Classroom instance);
    partial void DeleteClassroom(Classroom instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertExamCode(ExamCode instance);
    partial void UpdateExamCode(ExamCode instance);
    partial void DeleteExamCode(ExamCode instance);
    partial void InsertExamCode_Question(ExamCode_Question instance);
    partial void UpdateExamCode_Question(ExamCode_Question instance);
    partial void DeleteExamCode_Question(ExamCode_Question instance);
    partial void InsertExamDetail(ExamDetail instance);
    partial void UpdateExamDetail(ExamDetail instance);
    partial void DeleteExamDetail(ExamDetail instance);
    partial void InsertExamResult(ExamResult instance);
    partial void UpdateExamResult(ExamResult instance);
    partial void DeleteExamResult(ExamResult instance);
    partial void InsertExamTake(ExamTake instance);
    partial void UpdateExamTake(ExamTake instance);
    partial void DeleteExamTake(ExamTake instance);
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertQuestionDistribute(QuestionDistribute instance);
    partial void UpdateQuestionDistribute(QuestionDistribute instance);
    partial void DeleteQuestionDistribute(QuestionDistribute instance);
    partial void InsertRoleType(RoleType instance);
    partial void UpdateRoleType(RoleType instance);
    partial void DeleteRoleType(RoleType instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTeach(Teach instance);
    partial void UpdateTeach(Teach instance);
    partial void DeleteTeach(Teach instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    #endregion
		
		public QLThiTracNghiemDataContext() : 
				base(global::DoAnLTUDQL1.Properties.Settings.Default.QLThiTracNghiemConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public QLThiTracNghiemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLThiTracNghiemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLThiTracNghiemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLThiTracNghiemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<AnswerDistribute> AnswerDistributes
		{
			get
			{
				return this.GetTable<AnswerDistribute>();
			}
		}
		
		public System.Data.Linq.Table<Classroom> Classrooms
		{
			get
			{
				return this.GetTable<Classroom>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<ExamCode> ExamCodes
		{
			get
			{
				return this.GetTable<ExamCode>();
			}
		}
		
		public System.Data.Linq.Table<ExamCode_Question> ExamCode_Questions
		{
			get
			{
				return this.GetTable<ExamCode_Question>();
			}
		}
		
		public System.Data.Linq.Table<ExamDetail> ExamDetails
		{
			get
			{
				return this.GetTable<ExamDetail>();
			}
		}
		
		public System.Data.Linq.Table<ExamResult> ExamResults
		{
			get
			{
				return this.GetTable<ExamResult>();
			}
		}
		
		public System.Data.Linq.Table<ExamTake> ExamTakes
		{
			get
			{
				return this.GetTable<ExamTake>();
			}
		}
		
		public System.Data.Linq.Table<Grade> Grades
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<QuestionDistribute> QuestionDistributes
		{
			get
			{
				return this.GetTable<QuestionDistribute>();
			}
		}
		
		public System.Data.Linq.Table<RoleType> RoleTypes
		{
			get
			{
				return this.GetTable<RoleType>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Teach> Teaches
		{
			get
			{
				return this.GetTable<Teach>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answer")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerId;
		
		private int _QuestionId;
		
		private string _Content;
		
		private System.Nullable<bool> _IsCorrect;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerIdChanging(int value);
    partial void OnAnswerIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnIsCorrectChanging(System.Nullable<bool> value);
    partial void OnIsCorrectChanged();
    #endregion
		
		public Answer()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AnswerId
		{
			get
			{
				return this._AnswerId;
			}
			set
			{
				if ((this._AnswerId != value))
				{
					this.OnAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerId = value;
					this.SendPropertyChanged("AnswerId");
					this.OnAnswerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorrect", DbType="Bit")]
		public System.Nullable<bool> IsCorrect
		{
			get
			{
				return this._IsCorrect;
			}
			set
			{
				if ((this._IsCorrect != value))
				{
					this.OnIsCorrectChanging(value);
					this.SendPropertyChanging();
					this._IsCorrect = value;
					this.SendPropertyChanged("IsCorrect");
					this.OnIsCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Question", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _Dob;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.DateTime> _LastLoginDate;
		
		private System.Nullable<int> _RoleTypeId;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Teacher> _Teachers;
		
		private EntityRef<RoleType> _RoleType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDobChanging(System.Nullable<System.DateTime> value);
    partial void OnDobChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnLastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateChanged();
    partial void OnRoleTypeIdChanging(System.Nullable<int> value);
    partial void OnRoleTypeIdChanged();
    #endregion
		
		public User()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Teachers = new EntitySet<Teacher>(new Action<Teacher>(this.attach_Teachers), new Action<Teacher>(this.detach_Teachers));
			this._RoleType = default(EntityRef<RoleType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dob", DbType="DateTime")]
		public System.Nullable<System.DateTime> Dob
		{
			get
			{
				return this._Dob;
			}
			set
			{
				if ((this._Dob != value))
				{
					this.OnDobChanging(value);
					this.SendPropertyChanging();
					this._Dob = value;
					this.SendPropertyChanged("Dob");
					this.OnDobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleTypeId", DbType="Int")]
		public System.Nullable<int> RoleTypeId
		{
			get
			{
				return this._RoleTypeId;
			}
			set
			{
				if ((this._RoleTypeId != value))
				{
					if (this._RoleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleTypeIdChanging(value);
					this.SendPropertyChanging();
					this._RoleTypeId = value;
					this.SendPropertyChanged("RoleTypeId");
					this.OnRoleTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Student", Storage="_Students", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Teacher", Storage="_Teachers", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Teacher> Teachers
		{
			get
			{
				return this._Teachers;
			}
			set
			{
				this._Teachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleType_User", Storage="_RoleType", ThisKey="RoleTypeId", OtherKey="RoleTypeId", IsForeignKey=true)]
		public RoleType RoleType
		{
			get
			{
				return this._RoleType.Entity;
			}
			set
			{
				RoleType previousValue = this._RoleType.Entity;
				if (((previousValue != value) 
							|| (this._RoleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleType.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._RoleType.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleTypeId = value.RoleTypeId;
					}
					else
					{
						this._RoleTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("RoleType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Teachers(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Teachers(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerDistribute")]
	public partial class AnswerDistribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerDistributeId;
		
		private int _QuestionDistributeId;
		
		private string _Content;
		
		private System.Nullable<bool> _IsCorrect;
		
		private EntityRef<QuestionDistribute> _QuestionDistribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerDistributeIdChanging(int value);
    partial void OnAnswerDistributeIdChanged();
    partial void OnQuestionDistributeIdChanging(int value);
    partial void OnQuestionDistributeIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnIsCorrectChanging(System.Nullable<bool> value);
    partial void OnIsCorrectChanged();
    #endregion
		
		public AnswerDistribute()
		{
			this._QuestionDistribute = default(EntityRef<QuestionDistribute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerDistributeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AnswerDistributeId
		{
			get
			{
				return this._AnswerDistributeId;
			}
			set
			{
				if ((this._AnswerDistributeId != value))
				{
					this.OnAnswerDistributeIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerDistributeId = value;
					this.SendPropertyChanged("AnswerDistributeId");
					this.OnAnswerDistributeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDistributeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionDistributeId
		{
			get
			{
				return this._QuestionDistributeId;
			}
			set
			{
				if ((this._QuestionDistributeId != value))
				{
					if (this._QuestionDistribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionDistributeIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionDistributeId = value;
					this.SendPropertyChanged("QuestionDistributeId");
					this.OnQuestionDistributeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorrect", DbType="Bit")]
		public System.Nullable<bool> IsCorrect
		{
			get
			{
				return this._IsCorrect;
			}
			set
			{
				if ((this._IsCorrect != value))
				{
					this.OnIsCorrectChanging(value);
					this.SendPropertyChanging();
					this._IsCorrect = value;
					this.SendPropertyChanged("IsCorrect");
					this.OnIsCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionDistribute_AnswerDistribute", Storage="_QuestionDistribute", ThisKey="QuestionDistributeId", OtherKey="QuestionDistributeId", IsForeignKey=true)]
		public QuestionDistribute QuestionDistribute
		{
			get
			{
				return this._QuestionDistribute.Entity;
			}
			set
			{
				QuestionDistribute previousValue = this._QuestionDistribute.Entity;
				if (((previousValue != value) 
							|| (this._QuestionDistribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionDistribute.Entity = null;
						previousValue.AnswerDistributes.Remove(this);
					}
					this._QuestionDistribute.Entity = value;
					if ((value != null))
					{
						value.AnswerDistributes.Add(this);
						this._QuestionDistributeId = value.QuestionDistributeId;
					}
					else
					{
						this._QuestionDistributeId = default(int);
					}
					this.SendPropertyChanged("QuestionDistribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classroom")]
	public partial class Classroom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClassroomId;
		
		private int _GradeId;
		
		private string _ClassName;
		
		private System.Nullable<int> _Year;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Teach> _Teaches;
		
		private EntityRef<Grade> _Grade;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassroomIdChanging(string value);
    partial void OnClassroomIdChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    #endregion
		
		public Classroom()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Teaches = new EntitySet<Teach>(new Action<Teach>(this.attach_Teaches), new Action<Teach>(this.detach_Teaches));
			this._Grade = default(EntityRef<Grade>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassroomId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClassroomId
		{
			get
			{
				return this._ClassroomId;
			}
			set
			{
				if ((this._ClassroomId != value))
				{
					this.OnClassroomIdChanging(value);
					this.SendPropertyChanging();
					this._ClassroomId = value;
					this.SendPropertyChanged("ClassroomId");
					this.OnClassroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL")]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classroom_Student", Storage="_Students", ThisKey="ClassroomId", OtherKey="ClassroomId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classroom_Teach", Storage="_Teaches", ThisKey="ClassroomId", OtherKey="ClassroomId")]
		public EntitySet<Teach> Teaches
		{
			get
			{
				return this._Teaches;
			}
			set
			{
				this._Teaches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Classroom", Storage="_Grade", ThisKey="GradeId", OtherKey="GradeId", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Classrooms.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Classrooms.Add(this);
						this._GradeId = value.GradeId;
					}
					else
					{
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Classroom = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Classroom = null;
		}
		
		private void attach_Teaches(Teach entity)
		{
			this.SendPropertyChanging();
			entity.Classroom = this;
		}
		
		private void detach_Teaches(Teach entity)
		{
			this.SendPropertyChanging();
			entity.Classroom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ExamId;
		
		private string _ExamName;
		
		private System.Nullable<bool> _IsPacticeExam;
		
		private EntitySet<ExamDetail> _ExamDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamIdChanging(string value);
    partial void OnExamIdChanged();
    partial void OnExamNameChanging(string value);
    partial void OnExamNameChanged();
    partial void OnIsPacticeExamChanging(System.Nullable<bool> value);
    partial void OnIsPacticeExamChanged();
    #endregion
		
		public Exam()
		{
			this._ExamDetails = new EntitySet<ExamDetail>(new Action<ExamDetail>(this.attach_ExamDetails), new Action<ExamDetail>(this.detach_ExamDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamName", DbType="NVarChar(50)")]
		public string ExamName
		{
			get
			{
				return this._ExamName;
			}
			set
			{
				if ((this._ExamName != value))
				{
					this.OnExamNameChanging(value);
					this.SendPropertyChanging();
					this._ExamName = value;
					this.SendPropertyChanged("ExamName");
					this.OnExamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPacticeExam", DbType="Bit")]
		public System.Nullable<bool> IsPacticeExam
		{
			get
			{
				return this._IsPacticeExam;
			}
			set
			{
				if ((this._IsPacticeExam != value))
				{
					this.OnIsPacticeExamChanging(value);
					this.SendPropertyChanging();
					this._IsPacticeExam = value;
					this.SendPropertyChanged("IsPacticeExam");
					this.OnIsPacticeExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamDetail", Storage="_ExamDetails", ThisKey="ExamId", OtherKey="ExamId")]
		public EntitySet<ExamDetail> ExamDetails
		{
			get
			{
				return this._ExamDetails;
			}
			set
			{
				this._ExamDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamDetails(ExamDetail entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_ExamDetails(ExamDetail entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamCode")]
	public partial class ExamCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ExamCodeId;
		
		private System.Nullable<int> _NumberOfQuestions;
		
		private string _SubjectId;
		
		private int _GradeId;
		
		private System.Nullable<bool> _IsPracticeExam;
		
		private EntitySet<ExamCode_Question> _ExamCode_Questions;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamCodeIdChanging(string value);
    partial void OnExamCodeIdChanged();
    partial void OnNumberOfQuestionsChanging(System.Nullable<int> value);
    partial void OnNumberOfQuestionsChanged();
    partial void OnSubjectIdChanging(string value);
    partial void OnSubjectIdChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    partial void OnIsPracticeExamChanging(System.Nullable<bool> value);
    partial void OnIsPracticeExamChanged();
    #endregion
		
		public ExamCode()
		{
			this._ExamCode_Questions = new EntitySet<ExamCode_Question>(new Action<ExamCode_Question>(this.attach_ExamCode_Questions), new Action<ExamCode_Question>(this.detach_ExamCode_Questions));
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCodeId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ExamCodeId
		{
			get
			{
				return this._ExamCodeId;
			}
			set
			{
				if ((this._ExamCodeId != value))
				{
					this.OnExamCodeIdChanging(value);
					this.SendPropertyChanging();
					this._ExamCodeId = value;
					this.SendPropertyChanged("ExamCodeId");
					this.OnExamCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfQuestions", DbType="Int")]
		public System.Nullable<int> NumberOfQuestions
		{
			get
			{
				return this._NumberOfQuestions;
			}
			set
			{
				if ((this._NumberOfQuestions != value))
				{
					this.OnNumberOfQuestionsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfQuestions = value;
					this.SendPropertyChanged("NumberOfQuestions");
					this.OnNumberOfQuestionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL")]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPracticeExam", DbType="Bit")]
		public System.Nullable<bool> IsPracticeExam
		{
			get
			{
				return this._IsPracticeExam;
			}
			set
			{
				if ((this._IsPracticeExam != value))
				{
					this.OnIsPracticeExamChanging(value);
					this.SendPropertyChanging();
					this._IsPracticeExam = value;
					this.SendPropertyChanged("IsPracticeExam");
					this.OnIsPracticeExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamCode_ExamCode_Question", Storage="_ExamCode_Questions", ThisKey="ExamCodeId", OtherKey="ExamCodeId")]
		public EntitySet<ExamCode_Question> ExamCode_Questions
		{
			get
			{
				return this._ExamCode_Questions;
			}
			set
			{
				this._ExamCode_Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ExamCode", Storage="_Subject", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.ExamCodes.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.ExamCodes.Add(this);
						this._SubjectId = value.SubjectId;
						this._GradeId = value.GradeId;
					}
					else
					{
						this._SubjectId = default(string);
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamCode_Questions(ExamCode_Question entity)
		{
			this.SendPropertyChanging();
			entity.ExamCode = this;
		}
		
		private void detach_ExamCode_Questions(ExamCode_Question entity)
		{
			this.SendPropertyChanging();
			entity.ExamCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamCode_Question")]
	public partial class ExamCode_Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ExamCodeId;
		
		private int _QuestionId;
		
		private EntityRef<ExamCode> _ExamCode;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamCodeIdChanging(string value);
    partial void OnExamCodeIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    #endregion
		
		public ExamCode_Question()
		{
			this._ExamCode = default(EntityRef<ExamCode>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCodeId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ExamCodeId
		{
			get
			{
				return this._ExamCodeId;
			}
			set
			{
				if ((this._ExamCodeId != value))
				{
					if (this._ExamCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamCodeIdChanging(value);
					this.SendPropertyChanging();
					this._ExamCodeId = value;
					this.SendPropertyChanged("ExamCodeId");
					this.OnExamCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamCode_ExamCode_Question", Storage="_ExamCode", ThisKey="ExamCodeId", OtherKey="ExamCodeId", IsForeignKey=true)]
		public ExamCode ExamCode
		{
			get
			{
				return this._ExamCode.Entity;
			}
			set
			{
				ExamCode previousValue = this._ExamCode.Entity;
				if (((previousValue != value) 
							|| (this._ExamCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamCode.Entity = null;
						previousValue.ExamCode_Questions.Remove(this);
					}
					this._ExamCode.Entity = value;
					if ((value != null))
					{
						value.ExamCode_Questions.Add(this);
						this._ExamCodeId = value.ExamCodeId;
					}
					else
					{
						this._ExamCodeId = default(string);
					}
					this.SendPropertyChanged("ExamCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_ExamCode_Question", Storage="_Question", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.ExamCode_Questions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.ExamCode_Questions.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamDetail")]
	public partial class ExamDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ExamDetailId;
		
		private string _ExamId;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<int> _Duration;
		
		private string _SubjectId;
		
		private int _GradeId;
		
		private EntitySet<ExamTake> _ExamTakes;
		
		private EntityRef<Exam> _Exam;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamDetailIdChanging(string value);
    partial void OnExamDetailIdChanged();
    partial void OnExamIdChanging(string value);
    partial void OnExamIdChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnSubjectIdChanging(string value);
    partial void OnSubjectIdChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    #endregion
		
		public ExamDetail()
		{
			this._ExamTakes = new EntitySet<ExamTake>(new Action<ExamTake>(this.attach_ExamTakes), new Action<ExamTake>(this.detach_ExamTakes));
			this._Exam = default(EntityRef<Exam>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamDetailId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ExamDetailId
		{
			get
			{
				return this._ExamDetailId;
			}
			set
			{
				if ((this._ExamDetailId != value))
				{
					this.OnExamDetailIdChanging(value);
					this.SendPropertyChanging();
					this._ExamDetailId = value;
					this.SendPropertyChanged("ExamDetailId");
					this.OnExamDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL")]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamDetail_ExamTake", Storage="_ExamTakes", ThisKey="ExamDetailId", OtherKey="ExamDetailId")]
		public EntitySet<ExamTake> ExamTakes
		{
			get
			{
				return this._ExamTakes;
			}
			set
			{
				this._ExamTakes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamDetail", Storage="_Exam", ThisKey="ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.ExamDetails.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.ExamDetails.Add(this);
						this._ExamId = value.ExamId;
					}
					else
					{
						this._ExamId = default(string);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ExamDetail", Storage="_Subject", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.ExamDetails.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.ExamDetails.Add(this);
						this._SubjectId = value.SubjectId;
						this._GradeId = value.GradeId;
					}
					else
					{
						this._SubjectId = default(string);
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamTakes(ExamTake entity)
		{
			this.SendPropertyChanging();
			entity.ExamDetail = this;
		}
		
		private void detach_ExamTakes(ExamTake entity)
		{
			this.SendPropertyChanging();
			entity.ExamDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamResult")]
	public partial class ExamResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ExamDetailId;
		
		private string _StudentId;
		
		private System.Nullable<int> _NumberOfQuestionsAnswered;
		
		private System.Nullable<int> _NumberOfCorrectAnswers;
		
		private System.Nullable<double> _Mark;
		
		private string _ExamCodeId;
		
		private EntityRef<ExamTake> _ExamTake;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamDetailIdChanging(string value);
    partial void OnExamDetailIdChanged();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnNumberOfQuestionsAnsweredChanging(System.Nullable<int> value);
    partial void OnNumberOfQuestionsAnsweredChanged();
    partial void OnNumberOfCorrectAnswersChanging(System.Nullable<int> value);
    partial void OnNumberOfCorrectAnswersChanged();
    partial void OnMarkChanging(System.Nullable<double> value);
    partial void OnMarkChanged();
    partial void OnExamCodeIdChanging(string value);
    partial void OnExamCodeIdChanged();
    #endregion
		
		public ExamResult()
		{
			this._ExamTake = default(EntityRef<ExamTake>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamDetailId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ExamDetailId
		{
			get
			{
				return this._ExamDetailId;
			}
			set
			{
				if ((this._ExamDetailId != value))
				{
					if (this._ExamTake.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamDetailIdChanging(value);
					this.SendPropertyChanging();
					this._ExamDetailId = value;
					this.SendPropertyChanged("ExamDetailId");
					this.OnExamDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._ExamTake.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfQuestionsAnswered", DbType="Int")]
		public System.Nullable<int> NumberOfQuestionsAnswered
		{
			get
			{
				return this._NumberOfQuestionsAnswered;
			}
			set
			{
				if ((this._NumberOfQuestionsAnswered != value))
				{
					this.OnNumberOfQuestionsAnsweredChanging(value);
					this.SendPropertyChanging();
					this._NumberOfQuestionsAnswered = value;
					this.SendPropertyChanged("NumberOfQuestionsAnswered");
					this.OnNumberOfQuestionsAnsweredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfCorrectAnswers", DbType="Int")]
		public System.Nullable<int> NumberOfCorrectAnswers
		{
			get
			{
				return this._NumberOfCorrectAnswers;
			}
			set
			{
				if ((this._NumberOfCorrectAnswers != value))
				{
					this.OnNumberOfCorrectAnswersChanging(value);
					this.SendPropertyChanging();
					this._NumberOfCorrectAnswers = value;
					this.SendPropertyChanged("NumberOfCorrectAnswers");
					this.OnNumberOfCorrectAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="Float")]
		public System.Nullable<double> Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCodeId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ExamCodeId
		{
			get
			{
				return this._ExamCodeId;
			}
			set
			{
				if ((this._ExamCodeId != value))
				{
					this.OnExamCodeIdChanging(value);
					this.SendPropertyChanging();
					this._ExamCodeId = value;
					this.SendPropertyChanged("ExamCodeId");
					this.OnExamCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamTake_ExamResult", Storage="_ExamTake", ThisKey="ExamDetailId,StudentId", OtherKey="ExamDetailId,StudentId", IsForeignKey=true)]
		public ExamTake ExamTake
		{
			get
			{
				return this._ExamTake.Entity;
			}
			set
			{
				ExamTake previousValue = this._ExamTake.Entity;
				if (((previousValue != value) 
							|| (this._ExamTake.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamTake.Entity = null;
						previousValue.ExamResult = null;
					}
					this._ExamTake.Entity = value;
					if ((value != null))
					{
						value.ExamResult = this;
						this._ExamDetailId = value.ExamDetailId;
						this._StudentId = value.StudentId;
					}
					else
					{
						this._ExamDetailId = default(string);
						this._StudentId = default(string);
					}
					this.SendPropertyChanged("ExamTake");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamTake")]
	public partial class ExamTake : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ExamDetailId;
		
		private string _StudentId;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _ExamCodeId;
		
		private EntityRef<ExamResult> _ExamResult;
		
		private EntityRef<ExamDetail> _ExamDetail;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamDetailIdChanging(string value);
    partial void OnExamDetailIdChanged();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnExamCodeIdChanging(string value);
    partial void OnExamCodeIdChanged();
    #endregion
		
		public ExamTake()
		{
			this._ExamResult = default(EntityRef<ExamResult>);
			this._ExamDetail = default(EntityRef<ExamDetail>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamDetailId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ExamDetailId
		{
			get
			{
				return this._ExamDetailId;
			}
			set
			{
				if ((this._ExamDetailId != value))
				{
					if (this._ExamDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamDetailIdChanging(value);
					this.SendPropertyChanging();
					this._ExamDetailId = value;
					this.SendPropertyChanged("ExamDetailId");
					this.OnExamDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCodeId", DbType="VarChar(10)")]
		public string ExamCodeId
		{
			get
			{
				return this._ExamCodeId;
			}
			set
			{
				if ((this._ExamCodeId != value))
				{
					this.OnExamCodeIdChanging(value);
					this.SendPropertyChanging();
					this._ExamCodeId = value;
					this.SendPropertyChanged("ExamCodeId");
					this.OnExamCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamTake_ExamResult", Storage="_ExamResult", ThisKey="ExamDetailId,StudentId", OtherKey="ExamDetailId,StudentId", IsUnique=true, IsForeignKey=false)]
		public ExamResult ExamResult
		{
			get
			{
				return this._ExamResult.Entity;
			}
			set
			{
				ExamResult previousValue = this._ExamResult.Entity;
				if (((previousValue != value) 
							|| (this._ExamResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamResult.Entity = null;
						previousValue.ExamTake = null;
					}
					this._ExamResult.Entity = value;
					if ((value != null))
					{
						value.ExamTake = this;
					}
					this.SendPropertyChanged("ExamResult");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamDetail_ExamTake", Storage="_ExamDetail", ThisKey="ExamDetailId", OtherKey="ExamDetailId", IsForeignKey=true)]
		public ExamDetail ExamDetail
		{
			get
			{
				return this._ExamDetail.Entity;
			}
			set
			{
				ExamDetail previousValue = this._ExamDetail.Entity;
				if (((previousValue != value) 
							|| (this._ExamDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamDetail.Entity = null;
						previousValue.ExamTakes.Remove(this);
					}
					this._ExamDetail.Entity = value;
					if ((value != null))
					{
						value.ExamTakes.Add(this);
						this._ExamDetailId = value.ExamDetailId;
					}
					else
					{
						this._ExamDetailId = default(string);
					}
					this.SendPropertyChanged("ExamDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ExamTake", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.ExamTakes.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.ExamTakes.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grade")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GradeId;
		
		private string _GradeName;
		
		private EntitySet<Classroom> _Classrooms;
		
		private EntitySet<Subject> _Subjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    partial void OnGradeNameChanging(string value);
    partial void OnGradeNameChanged();
    #endregion
		
		public Grade()
		{
			this._Classrooms = new EntitySet<Classroom>(new Action<Classroom>(this.attach_Classrooms), new Action<Classroom>(this.detach_Classrooms));
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeName", DbType="NVarChar(50)")]
		public string GradeName
		{
			get
			{
				return this._GradeName;
			}
			set
			{
				if ((this._GradeName != value))
				{
					this.OnGradeNameChanging(value);
					this.SendPropertyChanging();
					this._GradeName = value;
					this.SendPropertyChanged("GradeName");
					this.OnGradeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Classroom", Storage="_Classrooms", ThisKey="GradeId", OtherKey="GradeId")]
		public EntitySet<Classroom> Classrooms
		{
			get
			{
				return this._Classrooms;
			}
			set
			{
				this._Classrooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Subject", Storage="_Subjects", ThisKey="GradeId", OtherKey="GradeId")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classrooms(Classroom entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Classrooms(Classroom entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionId;
		
		private string _Content;
		
		private string _Hint;
		
		private string _SubjectId;
		
		private int _GradeId;
		
		private System.Nullable<int> _DifficultLevel;
		
		private System.Nullable<bool> _IsDistributed;
		
		private System.Nullable<int> _NumberOfCorrectAnswers;
		
		private System.Nullable<int> _NumberOfWrongAnswers;
		
		private EntitySet<Answer> _Answers;
		
		private EntitySet<ExamCode_Question> _ExamCode_Questions;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnHintChanging(string value);
    partial void OnHintChanged();
    partial void OnSubjectIdChanging(string value);
    partial void OnSubjectIdChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    partial void OnDifficultLevelChanging(System.Nullable<int> value);
    partial void OnDifficultLevelChanged();
    partial void OnIsDistributedChanging(System.Nullable<bool> value);
    partial void OnIsDistributedChanged();
    partial void OnNumberOfCorrectAnswersChanging(System.Nullable<int> value);
    partial void OnNumberOfCorrectAnswersChanged();
    partial void OnNumberOfWrongAnswersChanging(System.Nullable<int> value);
    partial void OnNumberOfWrongAnswersChanged();
    #endregion
		
		public Question()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._ExamCode_Questions = new EntitySet<ExamCode_Question>(new Action<ExamCode_Question>(this.attach_ExamCode_Questions), new Action<ExamCode_Question>(this.detach_ExamCode_Questions));
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hint", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Hint
		{
			get
			{
				return this._Hint;
			}
			set
			{
				if ((this._Hint != value))
				{
					this.OnHintChanging(value);
					this.SendPropertyChanging();
					this._Hint = value;
					this.SendPropertyChanged("Hint");
					this.OnHintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL")]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DifficultLevel", DbType="Int")]
		public System.Nullable<int> DifficultLevel
		{
			get
			{
				return this._DifficultLevel;
			}
			set
			{
				if ((this._DifficultLevel != value))
				{
					this.OnDifficultLevelChanging(value);
					this.SendPropertyChanging();
					this._DifficultLevel = value;
					this.SendPropertyChanged("DifficultLevel");
					this.OnDifficultLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDistributed", DbType="Bit")]
		public System.Nullable<bool> IsDistributed
		{
			get
			{
				return this._IsDistributed;
			}
			set
			{
				if ((this._IsDistributed != value))
				{
					this.OnIsDistributedChanging(value);
					this.SendPropertyChanging();
					this._IsDistributed = value;
					this.SendPropertyChanged("IsDistributed");
					this.OnIsDistributedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfCorrectAnswers", DbType="Int")]
		public System.Nullable<int> NumberOfCorrectAnswers
		{
			get
			{
				return this._NumberOfCorrectAnswers;
			}
			set
			{
				if ((this._NumberOfCorrectAnswers != value))
				{
					this.OnNumberOfCorrectAnswersChanging(value);
					this.SendPropertyChanging();
					this._NumberOfCorrectAnswers = value;
					this.SendPropertyChanged("NumberOfCorrectAnswers");
					this.OnNumberOfCorrectAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfWrongAnswers", DbType="Int")]
		public System.Nullable<int> NumberOfWrongAnswers
		{
			get
			{
				return this._NumberOfWrongAnswers;
			}
			set
			{
				if ((this._NumberOfWrongAnswers != value))
				{
					this.OnNumberOfWrongAnswersChanging(value);
					this.SendPropertyChanging();
					this._NumberOfWrongAnswers = value;
					this.SendPropertyChanged("NumberOfWrongAnswers");
					this.OnNumberOfWrongAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Answers", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_ExamCode_Question", Storage="_ExamCode_Questions", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<ExamCode_Question> ExamCode_Questions
		{
			get
			{
				return this._ExamCode_Questions;
			}
			set
			{
				this._ExamCode_Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Question", Storage="_Subject", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._SubjectId = value.SubjectId;
						this._GradeId = value.GradeId;
					}
					else
					{
						this._SubjectId = default(string);
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_ExamCode_Questions(ExamCode_Question entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_ExamCode_Questions(ExamCode_Question entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionDistribute")]
	public partial class QuestionDistribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionDistributeId;
		
		private string _StudentId;
		
		private string _Content;
		
		private string _Hint;
		
		private string _SubjectId;
		
		private int _GradeId;
		
		private int _DifficultLevel;
		
		private System.Nullable<bool> _IsApproved;
		
		private EntitySet<AnswerDistribute> _AnswerDistributes;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionDistributeIdChanging(int value);
    partial void OnQuestionDistributeIdChanged();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnHintChanging(string value);
    partial void OnHintChanged();
    partial void OnSubjectIdChanging(string value);
    partial void OnSubjectIdChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    partial void OnDifficultLevelChanging(int value);
    partial void OnDifficultLevelChanged();
    partial void OnIsApprovedChanging(System.Nullable<bool> value);
    partial void OnIsApprovedChanged();
    #endregion
		
		public QuestionDistribute()
		{
			this._AnswerDistributes = new EntitySet<AnswerDistribute>(new Action<AnswerDistribute>(this.attach_AnswerDistributes), new Action<AnswerDistribute>(this.detach_AnswerDistributes));
			this._Student = default(EntityRef<Student>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDistributeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionDistributeId
		{
			get
			{
				return this._QuestionDistributeId;
			}
			set
			{
				if ((this._QuestionDistributeId != value))
				{
					this.OnQuestionDistributeIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionDistributeId = value;
					this.SendPropertyChanged("QuestionDistributeId");
					this.OnQuestionDistributeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="VarChar(10)")]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hint", DbType="NVarChar(MAX)")]
		public string Hint
		{
			get
			{
				return this._Hint;
			}
			set
			{
				if ((this._Hint != value))
				{
					this.OnHintChanging(value);
					this.SendPropertyChanging();
					this._Hint = value;
					this.SendPropertyChanged("Hint");
					this.OnHintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL")]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DifficultLevel", DbType="Int NOT NULL")]
		public int DifficultLevel
		{
			get
			{
				return this._DifficultLevel;
			}
			set
			{
				if ((this._DifficultLevel != value))
				{
					this.OnDifficultLevelChanging(value);
					this.SendPropertyChanging();
					this._DifficultLevel = value;
					this.SendPropertyChanged("DifficultLevel");
					this.OnDifficultLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit")]
		public System.Nullable<bool> IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionDistribute_AnswerDistribute", Storage="_AnswerDistributes", ThisKey="QuestionDistributeId", OtherKey="QuestionDistributeId")]
		public EntitySet<AnswerDistribute> AnswerDistributes
		{
			get
			{
				return this._AnswerDistributes;
			}
			set
			{
				this._AnswerDistributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_QuestionDistribute", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.QuestionDistributes.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.QuestionDistributes.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_QuestionDistribute", Storage="_Subject", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.QuestionDistributes.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.QuestionDistributes.Add(this);
						this._SubjectId = value.SubjectId;
						this._GradeId = value.GradeId;
					}
					else
					{
						this._SubjectId = default(string);
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnswerDistributes(AnswerDistribute entity)
		{
			this.SendPropertyChanging();
			entity.QuestionDistribute = this;
		}
		
		private void detach_AnswerDistributes(AnswerDistribute entity)
		{
			this.SendPropertyChanging();
			entity.QuestionDistribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleType")]
	public partial class RoleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleTypeId;
		
		private string _RoleName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleTypeIdChanging(int value);
    partial void OnRoleTypeIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public RoleType()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleTypeId
		{
			get
			{
				return this._RoleTypeId;
			}
			set
			{
				if ((this._RoleTypeId != value))
				{
					this.OnRoleTypeIdChanging(value);
					this.SendPropertyChanging();
					this._RoleTypeId = value;
					this.SendPropertyChanged("RoleTypeId");
					this.OnRoleTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleType_User", Storage="_Users", ThisKey="RoleTypeId", OtherKey="RoleTypeId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.RoleType = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.RoleType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StudentId;
		
		private string _Username;
		
		private string _ClassroomId;
		
		private EntitySet<ExamTake> _ExamTakes;
		
		private EntitySet<QuestionDistribute> _QuestionDistributes;
		
		private EntityRef<Classroom> _Classroom;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnClassroomIdChanging(string value);
    partial void OnClassroomIdChanged();
    #endregion
		
		public Student()
		{
			this._ExamTakes = new EntitySet<ExamTake>(new Action<ExamTake>(this.attach_ExamTakes), new Action<ExamTake>(this.detach_ExamTakes));
			this._QuestionDistributes = new EntitySet<QuestionDistribute>(new Action<QuestionDistribute>(this.attach_QuestionDistributes), new Action<QuestionDistribute>(this.detach_QuestionDistributes));
			this._Classroom = default(EntityRef<Classroom>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassroomId", DbType="VarChar(10)")]
		public string ClassroomId
		{
			get
			{
				return this._ClassroomId;
			}
			set
			{
				if ((this._ClassroomId != value))
				{
					if (this._Classroom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassroomIdChanging(value);
					this.SendPropertyChanging();
					this._ClassroomId = value;
					this.SendPropertyChanged("ClassroomId");
					this.OnClassroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ExamTake", Storage="_ExamTakes", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<ExamTake> ExamTakes
		{
			get
			{
				return this._ExamTakes;
			}
			set
			{
				this._ExamTakes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_QuestionDistribute", Storage="_QuestionDistributes", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<QuestionDistribute> QuestionDistributes
		{
			get
			{
				return this._QuestionDistributes;
			}
			set
			{
				this._QuestionDistributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classroom_Student", Storage="_Classroom", ThisKey="ClassroomId", OtherKey="ClassroomId", IsForeignKey=true)]
		public Classroom Classroom
		{
			get
			{
				return this._Classroom.Entity;
			}
			set
			{
				Classroom previousValue = this._Classroom.Entity;
				if (((previousValue != value) 
							|| (this._Classroom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Classroom.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Classroom.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._ClassroomId = value.ClassroomId;
					}
					else
					{
						this._ClassroomId = default(string);
					}
					this.SendPropertyChanged("Classroom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Student", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamTakes(ExamTake entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_ExamTakes(ExamTake entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_QuestionDistributes(QuestionDistribute entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_QuestionDistributes(QuestionDistribute entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SubjectId;
		
		private int _GradeId;
		
		private string _SubjectName;
		
		private EntitySet<ExamCode> _ExamCodes;
		
		private EntitySet<ExamDetail> _ExamDetails;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<QuestionDistribute> _QuestionDistributes;
		
		private EntitySet<Teach> _Teaches;
		
		private EntityRef<Grade> _Grade;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIdChanging(string value);
    partial void OnSubjectIdChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    #endregion
		
		public Subject()
		{
			this._ExamCodes = new EntitySet<ExamCode>(new Action<ExamCode>(this.attach_ExamCodes), new Action<ExamCode>(this.detach_ExamCodes));
			this._ExamDetails = new EntitySet<ExamDetail>(new Action<ExamDetail>(this.attach_ExamDetails), new Action<ExamDetail>(this.detach_ExamDetails));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._QuestionDistributes = new EntitySet<QuestionDistribute>(new Action<QuestionDistribute>(this.attach_QuestionDistributes), new Action<QuestionDistribute>(this.detach_QuestionDistributes));
			this._Teaches = new EntitySet<Teach>(new Action<Teach>(this.attach_Teaches), new Action<Teach>(this.detach_Teaches));
			this._Grade = default(EntityRef<Grade>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(50)")]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ExamCode", Storage="_ExamCodes", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId")]
		public EntitySet<ExamCode> ExamCodes
		{
			get
			{
				return this._ExamCodes;
			}
			set
			{
				this._ExamCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ExamDetail", Storage="_ExamDetails", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId")]
		public EntitySet<ExamDetail> ExamDetails
		{
			get
			{
				return this._ExamDetails;
			}
			set
			{
				this._ExamDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Question", Storage="_Questions", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_QuestionDistribute", Storage="_QuestionDistributes", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId")]
		public EntitySet<QuestionDistribute> QuestionDistributes
		{
			get
			{
				return this._QuestionDistributes;
			}
			set
			{
				this._QuestionDistributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Teach", Storage="_Teaches", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId")]
		public EntitySet<Teach> Teaches
		{
			get
			{
				return this._Teaches;
			}
			set
			{
				this._Teaches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Subject", Storage="_Grade", ThisKey="GradeId", OtherKey="GradeId", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._GradeId = value.GradeId;
					}
					else
					{
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamCodes(ExamCode entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_ExamCodes(ExamCode entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_ExamDetails(ExamDetail entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_ExamDetails(ExamDetail entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_QuestionDistributes(QuestionDistribute entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_QuestionDistributes(QuestionDistribute entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Teaches(Teach entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Teaches(Teach entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teach")]
	public partial class Teach : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TeacherId;
		
		private string _ClassroomId;
		
		private string _SubjectId;
		
		private int _GradeId;
		
		private EntityRef<Classroom> _Classroom;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIdChanging(string value);
    partial void OnTeacherIdChanged();
    partial void OnClassroomIdChanging(string value);
    partial void OnClassroomIdChanged();
    partial void OnSubjectIdChanging(string value);
    partial void OnSubjectIdChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    #endregion
		
		public Teach()
		{
			this._Classroom = default(EntityRef<Classroom>);
			this._Subject = default(EntityRef<Subject>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassroomId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClassroomId
		{
			get
			{
				return this._ClassroomId;
			}
			set
			{
				if ((this._ClassroomId != value))
				{
					if (this._Classroom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassroomIdChanging(value);
					this.SendPropertyChanging();
					this._ClassroomId = value;
					this.SendPropertyChanged("ClassroomId");
					this.OnClassroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classroom_Teach", Storage="_Classroom", ThisKey="ClassroomId", OtherKey="ClassroomId", IsForeignKey=true)]
		public Classroom Classroom
		{
			get
			{
				return this._Classroom.Entity;
			}
			set
			{
				Classroom previousValue = this._Classroom.Entity;
				if (((previousValue != value) 
							|| (this._Classroom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Classroom.Entity = null;
						previousValue.Teaches.Remove(this);
					}
					this._Classroom.Entity = value;
					if ((value != null))
					{
						value.Teaches.Add(this);
						this._ClassroomId = value.ClassroomId;
					}
					else
					{
						this._ClassroomId = default(string);
					}
					this.SendPropertyChanged("Classroom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Teach", Storage="_Subject", ThisKey="SubjectId,GradeId", OtherKey="SubjectId,GradeId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Teaches.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Teaches.Add(this);
						this._SubjectId = value.SubjectId;
						this._GradeId = value.GradeId;
					}
					else
					{
						this._SubjectId = default(string);
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Teach", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Teaches.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Teaches.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(string);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TeacherId;
		
		private string _Username;
		
		private EntitySet<Teach> _Teaches;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIdChanging(string value);
    partial void OnTeacherIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public Teacher()
		{
			this._Teaches = new EntitySet<Teach>(new Action<Teach>(this.attach_Teaches), new Action<Teach>(this.detach_Teaches));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Teach", Storage="_Teaches", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<Teach> Teaches
		{
			get
			{
				return this._Teaches;
			}
			set
			{
				this._Teaches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Teacher", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Teachers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Teachers.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teaches(Teach entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Teaches(Teach entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
}
#pragma warning restore 1591
